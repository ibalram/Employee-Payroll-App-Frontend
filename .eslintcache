[{"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\components\\payroll-form\\payroll-form.jsx":"1","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\App.js":"2","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\reportWebVitals.js":"3","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\index.js":"4","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\config\\config.js":"5","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\services\\employee-service.js":"6","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\services\\axios-service.js":"7"},{"size":10892,"mtime":1608286988473,"results":"8","hashOfConfig":"9"},{"size":471,"mtime":1608238345777,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"9"},{"size":100,"mtime":1608286191532,"results":"13","hashOfConfig":"9"},{"size":270,"mtime":1608262681992,"results":"14","hashOfConfig":"9"},{"size":766,"mtime":1608286191533,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1jqsxk3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\components\\payroll-form\\payroll-form.jsx",["31","32","33","34","35","36","37"],"import React, {useState, useEffect} from  'react';\r\nimport profile1 from \"../../assets/profile-images/Ellipse -3.png\";\r\nimport profile2 from \"../../assets/profile-images/Ellipse 1.png\";\r\nimport profile3 from \"../../assets/profile-images/Ellipse -8.png\";\r\nimport profile4 from \"../../assets/profile-images/Ellipse -7.png\";\r\nimport './payroll-form.scss';\r\nimport logo from '../../assets/images/logo.png';\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\nimport EmployeeService from '../../services/employee-service';\r\n\r\nconst PayrollForm = (props) =>{\r\n    let employeeService = new EmployeeService();\r\n    let initialValue = {\r\n        name: '',\r\n        profileArray: [\r\n            { url: '../../../assets/profile-images/Ellipse -3.png' },\r\n            { url: '../../../assets/profile-images/Ellipse 1.png' },\r\n            { url: '../../../assets/profile-images/Ellipse -8.png' },\r\n            { url: '../../../assets/profile-images/Ellipse -7.png' }\r\n        ],\r\n        allDepartment: [\r\n            'HR', 'Sales', 'Finance', 'Engineer', 'Others'\r\n        ],\r\n        departmentValue: [],\r\n        gender: '',\r\n        salary: '400000',\r\n        day: '1',\r\n        month: 'Jan',\r\n        year: '2020',\r\n        startDate: '',\r\n        notes: '',\r\n        id: '',\r\n        profileUrl: '',\r\n        isUpdate: false,\r\n        error: {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profileUrl: '',\r\n            startDate: ''\r\n        }\r\n    }\r\n    const [formValue, setForm] = useState(initialValue);\r\n\r\n    const changeValue  = (event) => {\r\n        setForm({ ...formValue, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const onCheckChange = (name) =>{\r\n        let index = formValue.departmentValue.indexOf(name);\r\n        let checkArray = [...formValue.departmentValue]\r\n        if (index > -1)\r\n            checkArray.splice(index, 1)\r\n        else\r\n            checkArray.push(name);\r\n        setForm({ ...formValue, departmentValue: checkArray });\r\n    }\r\n    const getChecked = (name) =>{\r\n        return formValue.departmentValue && formValue.departmentValue.includes(name);\r\n    }\r\n\r\n    const validData = async () =>{\r\n        let isError = false;\r\n        let error = {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profileUrl: '',\r\n            startDate: ''\r\n        }\r\n        if (formValue.name.length < 1){\r\n            error.name = 'name is required field'\r\n            isError = true;\r\n        }\r\n        if (formValue.gender.length < 1){\r\n            error.gender = 'gender is required field'\r\n            isError = true;\r\n        }\r\n        if (formValue.salary.length < 1){\r\n            error.salary = 'salary is required field'\r\n            isError = true;\r\n        }\r\n        if (formValue.profileUrl.length < 1){\r\n            error.profileUrl = 'profile is required field'\r\n            isError = true;\r\n        }\r\n        if (formValue.departmentValue.length < 1){\r\n            error.department = 'department is required field'\r\n            isError = true;\r\n        }\r\n\r\n        await setForm({ ...formValue, error: error })\r\n        return isError;\r\n\r\n    }\r\n\r\n    const save = async (event) =>{\r\n        event.preventDefault();\r\n\r\n        if (await validData()){\r\n            console.log('error', formValue);\r\n            return;\r\n        }\r\n        let object = {\r\n            name: formValue.name,\r\n            profilePic: formValue.profileUrl,\r\n            gender: formValue.gender,\r\n            department: formValue.departmentValue,\r\n            salary: formValue.salary,\r\n            startDate: `${formValue.day.length==1?\"0\"+formValue.day: formValue.day} ${formValue.month} ${formValue.year}`,\r\n            note: formValue.notes,\r\n        }\r\n\r\n        employeeService.addEmployee(object).then(data =>  {\r\n            alert(\"data added successfully\");\r\n            console.log(\"data added successfully\");\r\n            props.history.push('')\r\n        }).catch(err => console.log(err));\r\n    }\r\n    const reset = () => {\r\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate});\r\n        console.log(formValue);\r\n    }\r\n\r\n    // Components\r\n    const profiles = [profile1, profile2, profile3, profile4];\r\n\r\n    function ProfilePic(props){     \r\n        return (\r\n            <label>\r\n                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl==props.profile} value={props.profile} onChange={changeValue} />\r\n                <img className=\"profile\" src={profiles[props.index]} />\r\n            </label>\r\n        );\r\n    }\r\n\r\n    const departments = [\"HR\", \"Sales\", \"Finance\", \"Engineer\", \"Others\"];\r\n\r\n    function Department(props){\r\n        return (<>\r\n            <input className=\"checkbox\" type=\"checkbox\" id={props.department} onChange={() => onCheckChange(props.department)} \r\n                    defaultChecked={getChecked(props.department)} name=\"department\" value={props.department} />\r\n            <label className=\"text\" htmlFor={props.department}>{props.department}</label>\r\n        </>);\r\n    }\r\n\r\n    const days = Array.from(new Array(31),(val,index)=>index+1);\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    const years = [2020,2019,2018,2017,2016];\r\n    return (\r\n        <div className=\"payroll-main\">\r\n            <header className='header row center'>\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"\" />\r\n                    <div>\r\n                        <span className=\"emp-text\">EMPLOYEE</span> <br/>\r\n                        <span className=\"emp-text emp-payroll\">PAYROLL</span>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <div className=\"form-content\">\r\n                <form className=\"form\" action=\"#\" onReset={reset} onSubmit={save}>\r\n                    <div className=\"form-head\">Employee Payroll Form</div>\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" hmtlFor=\"name\">Name</label>\r\n                        <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your Name..\"  value={formValue.name} onChange={changeValue} />\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.name}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\r\n                        <div className=\"profile-radio-content\">\r\n                            {initialValue.profileArray.map((profile, index)=><ProfilePic key={profile.url.toString()} profile={profile.url} index={index}/>)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.profileUrl}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n                        <div>\r\n                            <input onChange={changeValue} type=\"radio\" id=\"male\" name=\"gender\" checked={formValue.gender==\"male\"}  value=\"male\" />\r\n                            <label className=\"text\" htmlFor=\"male\">Male</label>\r\n                            <input onChange={changeValue} type=\"radio\" id=\"female\" name=\"gender\" checked={formValue.gender==\"female\"} value=\"female\" />\r\n                            <label className=\"text\" htmlFor=\"female\">Female</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.gender}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n                        <div>\r\n                            {departments.map((department) => <Department key={department.toString()} department={department} />)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.department}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"salary\">Choose Your Salary: </label>\r\n                        <input className=\"input\" type=\"range\" onChange={changeValue} name=\"salary\" id=\"salary\" min=\"300000\" max=\"500000\" step=\"100\" defaultValue=\"400000\" />\r\n                        <output className=\"salary-output text\" htmlFor=\"salary\">{formValue.salary}</output>\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.salary}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n                        <div>\r\n                            <select onChange={changeValue} id=\"day\" className=\"date\" name=\"day\">\r\n                                {days.map((item) => <option key={\"day\"+item.toString()} value={item}>{item}</option> )}\r\n                            </select>\r\n                            <select onChange={changeValue} id=\"month\" className=\"date\" name=\"month\">\r\n                                {months.map((item) => <option key={\"month\"+item.toString()} value={item.slice(0,3)}>{item}</option> )}\r\n                            </select>\r\n                            <select onChange={changeValue} id=\"year\" className=\"date\" name=\"year\">\r\n                                {years.map((item) => <option key={\"year\"+item.toString()} value={item}>{item}</option> )}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"error\">{formValue.error.startDate}</div>\r\n\r\n                    <div className=\"row-content\">\r\n                        <label className=\"label text\" htmlFor=\"notes\">Notes</label>\r\n                        <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" \r\n                            placeholder=\"additional info..\" style={{height: '100%'}}></textarea>\r\n                    </div>\r\n                    <div className=\"buttonParent\">\r\n                        <Link to=\"./home.html\" className=\"resetButton button cancelButton\">Cancel</Link>\r\n                        <div className=\"submit-reset\">\r\n                            <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\" >{formValue.isUpdate ? 'Update' : 'Submit'}</button>\r\n                            <button type=\"reset\" onClick={reset} className=\"resetButton button\">Reset</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(PayrollForm);","D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\App.js",["38","39"],"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\reportWebVitals.js",[],"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\index.js",[],"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\config\\config.js",[],"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\services\\employee-service.js",[],"D:\\capgemini_fullstack_fellowship_VSCode\\reactApps\\employee-payroll-app-frontend\\src\\services\\axios-service.js",[],{"ruleId":"40","severity":1,"message":"41","line":1,"column":26,"nodeType":"42","messageId":"43","endLine":1,"endColumn":35},{"ruleId":"40","severity":1,"message":"44","line":8,"column":10,"nodeType":"42","messageId":"43","endLine":8,"endColumn":19},{"ruleId":"45","severity":1,"message":"46","line":112,"column":47,"nodeType":"47","messageId":"48","endLine":112,"endColumn":49},{"ruleId":"45","severity":1,"message":"46","line":133,"column":84,"nodeType":"47","messageId":"48","endLine":133,"endColumn":86},{"ruleId":"49","severity":1,"message":"50","line":134,"column":17,"nodeType":"51","endLine":134,"endColumn":72},{"ruleId":"45","severity":1,"message":"46","line":183,"column":121,"nodeType":"47","messageId":"48","endLine":183,"endColumn":123},{"ruleId":"45","severity":1,"message":"46","line":185,"column":123,"nodeType":"47","messageId":"48","endLine":185,"endColumn":125},{"ruleId":"40","severity":1,"message":"52","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":12},{"ruleId":"40","severity":1,"message":"53","line":7,"column":10,"nodeType":"42","messageId":"43","endLine":7,"endColumn":18},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'logo' is defined but never used.","'Redirect' is defined but never used."]